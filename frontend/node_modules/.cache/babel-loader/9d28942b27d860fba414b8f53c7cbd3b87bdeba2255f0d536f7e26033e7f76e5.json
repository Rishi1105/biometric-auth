{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rishi\\\\Downloads\\\\biometric-auth\\\\frontend\\\\src\\\\components\\\\ProtectedRoute.jsx\";\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { authService } from '../services/authService';\n\n/**\n * ProtectedRoute component that checks if the user is authenticated\n * before rendering the child component. If not authenticated, redirects to login.\n * \n * @param {Object} props - Component props\n * @param {React.ReactNode} props.children - Child components to render if authenticated\n * @returns {React.ReactNode} - Either the children or a redirect to login\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children\n}) => {\n  const isAuthenticated = authService.isAuthenticated();\n  if (!isAuthenticated) {\n    // Redirect to login page if not authenticated\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If authenticated, render the child components\n  return children;\n};\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","authService","jsxDEV","_jsxDEV","ProtectedRoute","children","isAuthenticated","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Rishi/Downloads/biometric-auth/frontend/src/components/ProtectedRoute.jsx"],"sourcesContent":["import React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { authService } from '../services/authService';\n\n/**\n * ProtectedRoute component that checks if the user is authenticated\n * before rendering the child component. If not authenticated, redirects to login.\n * \n * @param {Object} props - Component props\n * @param {React.ReactNode} props.children - Child components to render if authenticated\n * @returns {React.ReactNode} - Either the children or a redirect to login\n */\nconst ProtectedRoute = ({ children }) => {\n  const isAuthenticated = authService.isAuthenticated();\n  \n  if (!isAuthenticated) {\n    // Redirect to login page if not authenticated\n    return <Navigate to=\"/login\" replace />;\n  }\n  \n  // If authenticated, render the child components\n  return children;\n};\n\nexport default ProtectedRoute;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,WAAW,QAAQ,yBAAyB;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA,SAAAC,MAAA,IAAAC,OAAA;AAQA,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EACvC,MAAMC,eAAe,GAAGL,WAAW,CAACK,eAAe,CAAC,CAAC;EAErD,IAAI,CAACA,eAAe,EAAE;IACpB;IACA,oBAAOH,OAAA,CAACH,QAAQ;MAACO,EAAE,EAAC,QAAQ;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACzC;;EAEA;EACA,OAAOP,QAAQ;AACjB,CAAC;AAACQ,EAAA,GAVIT,cAAc;AAYpB,eAAeA,cAAc;AAAC,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}