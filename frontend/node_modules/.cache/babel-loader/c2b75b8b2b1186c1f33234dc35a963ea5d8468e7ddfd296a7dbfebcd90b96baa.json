{"ast":null,"code":"/**\n * Behavior Service\n * Handles behavioral monitoring for continuous authentication\n */\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nclass BehaviorService {\n  constructor() {\n    /**\n     * Handle keydown events\n     * @param {KeyboardEvent} event - Keyboard event\n     */\n    this.handleKeyDown = event => {\n      if (!this.monitoringActive) return;\n\n      // Don't capture actual key values for privacy, just metadata\n      const keystrokeData = {\n        type: 'keydown',\n        timestamp: Date.now(),\n        keyCode: event.keyCode,\n        shift: event.shiftKey,\n        ctrl: event.ctrlKey,\n        alt: event.altKey,\n        meta: event.metaKey\n      };\n      this.keystrokeBuffer.push(keystrokeData);\n\n      // If buffer reaches threshold, send data\n      if (this.keystrokeBuffer.length >= this.bufferSize) {\n        this.flushKeystrokeBuffer();\n      }\n    };\n    /**\n     * Handle keyup events\n     * @param {KeyboardEvent} event - Keyboard event\n     */\n    this.handleKeyUp = event => {\n      if (!this.monitoringActive) return;\n      const keystrokeData = {\n        type: 'keyup',\n        timestamp: Date.now(),\n        keyCode: event.keyCode,\n        shift: event.shiftKey,\n        ctrl: event.ctrlKey,\n        alt: event.altKey,\n        meta: event.metaKey\n      };\n      this.keystrokeBuffer.push(keystrokeData);\n\n      // If buffer reaches threshold, send data\n      if (this.keystrokeBuffer.length >= this.bufferSize) {\n        this.flushKeystrokeBuffer();\n      }\n    };\n    /**\n     * Handle mouse movement events\n     * @param {MouseEvent} event - Mouse event\n     */\n    this.handleMouseMove = event => {\n      if (!this.monitoringActive) return;\n\n      // Throttle mouse move events to reduce data volume\n      if (this.lastMouseMove && Date.now() - this.lastMouseMove < 100) {\n        return;\n      }\n      this.lastMouseMove = Date.now();\n      const mouseData = {\n        type: 'mousemove',\n        timestamp: Date.now(),\n        x: event.clientX,\n        y: event.clientY,\n        screenX: event.screenX,\n        screenY: event.screenY\n      };\n      this.mouseBuffer.push(mouseData);\n\n      // If buffer reaches threshold, send data\n      if (this.mouseBuffer.length >= this.bufferSize) {\n        this.flushMouseBuffer();\n      }\n    };\n    /**\n     * Handle mouse click events\n     * @param {MouseEvent} event - Mouse event\n     */\n    this.handleMouseClick = event => {\n      if (!this.monitoringActive) return;\n      const mouseData = {\n        type: 'click',\n        timestamp: Date.now(),\n        x: event.clientX,\n        y: event.clientY,\n        button: event.button\n      };\n      this.mouseBuffer.push(mouseData);\n\n      // If buffer reaches threshold, send data\n      if (this.mouseBuffer.length >= this.bufferSize) {\n        this.flushMouseBuffer();\n      }\n    };\n    this.monitoringActive = false;\n    this.userId = null;\n    this.token = null;\n    this.keystrokeBuffer = [];\n    this.mouseBuffer = [];\n    this.deviceBuffer = [];\n    this.bufferSize = 20; // Number of events to buffer before sending\n    this.flushInterval = 5000; // Flush buffer every 5 seconds\n\n    // Intervals for periodic data sending\n    this.keystrokeInterval = null;\n    this.mouseInterval = null;\n    this.deviceInterval = null;\n  }\n\n  /**\n   * Start keystroke monitoring\n   * @param {string} userId - User ID\n   * @param {string} token - Authentication token\n   */\n  startKeystrokeMonitoring(userId, token) {\n    if (this.keystrokeInterval) return;\n    this.userId = userId;\n    this.token = token;\n    this.monitoringActive = true;\n\n    // Set up keystroke event listeners\n    document.addEventListener('keydown', this.handleKeyDown);\n    document.addEventListener('keyup', this.handleKeyUp);\n\n    // Set up interval to periodically send data\n    this.keystrokeInterval = setInterval(() => {\n      this.flushKeystrokeBuffer();\n    }, this.flushInterval);\n    console.log('Keystroke monitoring started');\n  }\n  /**\n   * Send keystroke data to the server\n   */\n  async flushKeystrokeBuffer() {\n    if (this.keystrokeBuffer.length === 0) return;\n    const dataToSend = [...this.keystrokeBuffer];\n    this.keystrokeBuffer = [];\n    try {\n      await fetch(`${API_BASE_URL}/behavior/keystroke`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.token}`\n        },\n        body: JSON.stringify({\n          userId: this.userId,\n          data: dataToSend\n        })\n      });\n    } catch (error) {\n      console.error('Error sending keystroke data:', error);\n    }\n  }\n\n  /**\n   * Stop keystroke monitoring\n   */\n  stopKeystrokeMonitoring() {\n    document.removeEventListener('keydown', this.handleKeyDown);\n    document.removeEventListener('keyup', this.handleKeyUp);\n    if (this.keystrokeInterval) {\n      clearInterval(this.keystrokeInterval);\n      this.keystrokeInterval = null;\n    }\n\n    // Flush any remaining data\n    this.flushKeystrokeBuffer();\n    console.log('Keystroke monitoring stopped');\n  }\n\n  /**\n   * Start mouse movement monitoring\n   * @param {string} userId - User ID\n   * @param {string} token - Authentication token\n   */\n  startMouseMonitoring(userId, token) {\n    if (this.mouseInterval) return;\n    this.userId = userId;\n    this.token = token;\n    this.monitoringActive = true;\n\n    // Set up mouse event listeners\n    document.addEventListener('mousemove', this.handleMouseMove);\n    document.addEventListener('click', this.handleMouseClick);\n\n    // Set up interval to periodically send data\n    this.mouseInterval = setInterval(() => {\n      this.flushMouseBuffer();\n    }, this.flushInterval);\n    console.log('Mouse monitoring started');\n  }\n  /**\n   * Send mouse data to the server\n   */\n  async flushMouseBuffer() {\n    if (this.mouseBuffer.length === 0) return;\n    const dataToSend = [...this.mouseBuffer];\n    this.mouseBuffer = [];\n    try {\n      await fetch(`${API_BASE_URL}/behavior/mouse`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.token}`\n        },\n        body: JSON.stringify({\n          userId: this.userId,\n          data: dataToSend\n        })\n      });\n    } catch (error) {\n      console.error('Error sending mouse data:', error);\n    }\n  }\n\n  /**\n   * Stop mouse monitoring\n   */\n  stopMouseMonitoring() {\n    document.removeEventListener('mousemove', this.handleMouseMove);\n    document.removeEventListener('click', this.handleMouseClick);\n    if (this.mouseInterval) {\n      clearInterval(this.mouseInterval);\n      this.mouseInterval = null;\n    }\n\n    // Flush any remaining data\n    this.flushMouseBuffer();\n    console.log('Mouse monitoring stopped');\n  }\n\n  /**\n   * Start device monitoring\n   * @param {string} userId - User ID\n   * @param {string} token - Authentication token\n   */\n  startDeviceMonitoring(userId, token) {\n    if (this.deviceInterval) return;\n    this.userId = userId;\n    this.token = token;\n    this.monitoringActive = true;\n\n    // Collect initial device data\n    this.collectDeviceData();\n\n    // Set up interval to periodically collect and send data\n    this.deviceInterval = setInterval(() => {\n      this.collectDeviceData();\n      this.flushDeviceBuffer();\n    }, 30000); // Every 30 seconds\n\n    console.log('Device monitoring started');\n  }\n\n  /**\n   * Collect device data\n   */\n  collectDeviceData() {\n    if (!this.monitoringActive) return;\n    const deviceData = {\n      timestamp: Date.now(),\n      userAgent: navigator.userAgent,\n      language: navigator.language,\n      platform: navigator.platform,\n      screenWidth: window.screen.width,\n      screenHeight: window.screen.height,\n      windowWidth: window.innerWidth,\n      windowHeight: window.innerHeight,\n      pixelRatio: window.devicePixelRatio,\n      timeZoneOffset: new Date().getTimezoneOffset(),\n      connection: navigator.connection ? {\n        effectiveType: navigator.connection.effectiveType,\n        downlink: navigator.connection.downlink,\n        rtt: navigator.connection.rtt\n      } : null\n    };\n    this.deviceBuffer.push(deviceData);\n  }\n\n  /**\n   * Send device data to the server\n   */\n  async flushDeviceBuffer() {\n    if (this.deviceBuffer.length === 0) return;\n    const dataToSend = [...this.deviceBuffer];\n    this.deviceBuffer = [];\n    try {\n      await fetch(`${API_BASE_URL}/behavior/device`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.token}`\n        },\n        body: JSON.stringify({\n          userId: this.userId,\n          data: dataToSend\n        })\n      });\n    } catch (error) {\n      console.error('Error sending device data:', error);\n    }\n  }\n\n  /**\n   * Stop device monitoring\n   */\n  stopDeviceMonitoring() {\n    if (this.deviceInterval) {\n      clearInterval(this.deviceInterval);\n      this.deviceInterval = null;\n    }\n\n    // Flush any remaining data\n    this.flushDeviceBuffer();\n    console.log('Device monitoring stopped');\n  }\n\n  /**\n   * Stop all monitoring\n   */\n  stopAllMonitoring() {\n    this.monitoringActive = false;\n    this.stopKeystrokeMonitoring();\n    this.stopMouseMonitoring();\n    this.stopDeviceMonitoring();\n    console.log('All behavioral monitoring stopped');\n  }\n}\nexport const behaviorService = new BehaviorService();","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","BehaviorService","constructor","handleKeyDown","event","monitoringActive","keystrokeData","type","timestamp","Date","now","keyCode","shift","shiftKey","ctrl","ctrlKey","alt","altKey","meta","metaKey","keystrokeBuffer","push","length","bufferSize","flushKeystrokeBuffer","handleKeyUp","handleMouseMove","lastMouseMove","mouseData","x","clientX","y","clientY","screenX","screenY","mouseBuffer","flushMouseBuffer","handleMouseClick","button","userId","token","deviceBuffer","flushInterval","keystrokeInterval","mouseInterval","deviceInterval","startKeystrokeMonitoring","document","addEventListener","setInterval","console","log","dataToSend","fetch","method","headers","body","JSON","stringify","data","error","stopKeystrokeMonitoring","removeEventListener","clearInterval","startMouseMonitoring","stopMouseMonitoring","startDeviceMonitoring","collectDeviceData","flushDeviceBuffer","deviceData","userAgent","navigator","language","platform","screenWidth","window","screen","width","screenHeight","height","windowWidth","innerWidth","windowHeight","innerHeight","pixelRatio","devicePixelRatio","timeZoneOffset","getTimezoneOffset","connection","effectiveType","downlink","rtt","stopDeviceMonitoring","stopAllMonitoring","behaviorService"],"sources":["C:/Users/Rishi/Downloads/biometric-auth/frontend/src/services/behaviorService.js"],"sourcesContent":["/**\n * Behavior Service\n * Handles behavioral monitoring for continuous authentication\n */\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nclass BehaviorService {\n  constructor() {\n    this.monitoringActive = false;\n    this.userId = null;\n    this.token = null;\n    this.keystrokeBuffer = [];\n    this.mouseBuffer = [];\n    this.deviceBuffer = [];\n    this.bufferSize = 20; // Number of events to buffer before sending\n    this.flushInterval = 5000; // Flush buffer every 5 seconds\n    \n    // Intervals for periodic data sending\n    this.keystrokeInterval = null;\n    this.mouseInterval = null;\n    this.deviceInterval = null;\n  }\n\n  /**\n   * Start keystroke monitoring\n   * @param {string} userId - User ID\n   * @param {string} token - Authentication token\n   */\n  startKeystrokeMonitoring(userId, token) {\n    if (this.keystrokeInterval) return;\n    \n    this.userId = userId;\n    this.token = token;\n    this.monitoringActive = true;\n    \n    // Set up keystroke event listeners\n    document.addEventListener('keydown', this.handleKeyDown);\n    document.addEventListener('keyup', this.handleKeyUp);\n    \n    // Set up interval to periodically send data\n    this.keystrokeInterval = setInterval(() => {\n      this.flushKeystrokeBuffer();\n    }, this.flushInterval);\n    \n    console.log('Keystroke monitoring started');\n  }\n\n  /**\n   * Handle keydown events\n   * @param {KeyboardEvent} event - Keyboard event\n   */\n  handleKeyDown = (event) => {\n    if (!this.monitoringActive) return;\n    \n    // Don't capture actual key values for privacy, just metadata\n    const keystrokeData = {\n      type: 'keydown',\n      timestamp: Date.now(),\n      keyCode: event.keyCode,\n      shift: event.shiftKey,\n      ctrl: event.ctrlKey,\n      alt: event.altKey,\n      meta: event.metaKey\n    };\n    \n    this.keystrokeBuffer.push(keystrokeData);\n    \n    // If buffer reaches threshold, send data\n    if (this.keystrokeBuffer.length >= this.bufferSize) {\n      this.flushKeystrokeBuffer();\n    }\n  };\n\n  /**\n   * Handle keyup events\n   * @param {KeyboardEvent} event - Keyboard event\n   */\n  handleKeyUp = (event) => {\n    if (!this.monitoringActive) return;\n    \n    const keystrokeData = {\n      type: 'keyup',\n      timestamp: Date.now(),\n      keyCode: event.keyCode,\n      shift: event.shiftKey,\n      ctrl: event.ctrlKey,\n      alt: event.altKey,\n      meta: event.metaKey\n    };\n    \n    this.keystrokeBuffer.push(keystrokeData);\n    \n    // If buffer reaches threshold, send data\n    if (this.keystrokeBuffer.length >= this.bufferSize) {\n      this.flushKeystrokeBuffer();\n    }\n  };\n\n  /**\n   * Send keystroke data to the server\n   */\n  async flushKeystrokeBuffer() {\n    if (this.keystrokeBuffer.length === 0) return;\n    \n    const dataToSend = [...this.keystrokeBuffer];\n    this.keystrokeBuffer = [];\n    \n    try {\n      await fetch(`${API_BASE_URL}/behavior/keystroke`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.token}`,\n        },\n        body: JSON.stringify({\n          userId: this.userId,\n          data: dataToSend\n        }),\n      });\n    } catch (error) {\n      console.error('Error sending keystroke data:', error);\n    }\n  }\n\n  /**\n   * Stop keystroke monitoring\n   */\n  stopKeystrokeMonitoring() {\n    document.removeEventListener('keydown', this.handleKeyDown);\n    document.removeEventListener('keyup', this.handleKeyUp);\n    \n    if (this.keystrokeInterval) {\n      clearInterval(this.keystrokeInterval);\n      this.keystrokeInterval = null;\n    }\n    \n    // Flush any remaining data\n    this.flushKeystrokeBuffer();\n    \n    console.log('Keystroke monitoring stopped');\n  }\n\n  /**\n   * Start mouse movement monitoring\n   * @param {string} userId - User ID\n   * @param {string} token - Authentication token\n   */\n  startMouseMonitoring(userId, token) {\n    if (this.mouseInterval) return;\n    \n    this.userId = userId;\n    this.token = token;\n    this.monitoringActive = true;\n    \n    // Set up mouse event listeners\n    document.addEventListener('mousemove', this.handleMouseMove);\n    document.addEventListener('click', this.handleMouseClick);\n    \n    // Set up interval to periodically send data\n    this.mouseInterval = setInterval(() => {\n      this.flushMouseBuffer();\n    }, this.flushInterval);\n    \n    console.log('Mouse monitoring started');\n  }\n\n  /**\n   * Handle mouse movement events\n   * @param {MouseEvent} event - Mouse event\n   */\n  handleMouseMove = (event) => {\n    if (!this.monitoringActive) return;\n    \n    // Throttle mouse move events to reduce data volume\n    if (this.lastMouseMove && Date.now() - this.lastMouseMove < 100) {\n      return;\n    }\n    \n    this.lastMouseMove = Date.now();\n    \n    const mouseData = {\n      type: 'mousemove',\n      timestamp: Date.now(),\n      x: event.clientX,\n      y: event.clientY,\n      screenX: event.screenX,\n      screenY: event.screenY\n    };\n    \n    this.mouseBuffer.push(mouseData);\n    \n    // If buffer reaches threshold, send data\n    if (this.mouseBuffer.length >= this.bufferSize) {\n      this.flushMouseBuffer();\n    }\n  };\n\n  /**\n   * Handle mouse click events\n   * @param {MouseEvent} event - Mouse event\n   */\n  handleMouseClick = (event) => {\n    if (!this.monitoringActive) return;\n    \n    const mouseData = {\n      type: 'click',\n      timestamp: Date.now(),\n      x: event.clientX,\n      y: event.clientY,\n      button: event.button\n    };\n    \n    this.mouseBuffer.push(mouseData);\n    \n    // If buffer reaches threshold, send data\n    if (this.mouseBuffer.length >= this.bufferSize) {\n      this.flushMouseBuffer();\n    }\n  };\n\n  /**\n   * Send mouse data to the server\n   */\n  async flushMouseBuffer() {\n    if (this.mouseBuffer.length === 0) return;\n    \n    const dataToSend = [...this.mouseBuffer];\n    this.mouseBuffer = [];\n    \n    try {\n      await fetch(`${API_BASE_URL}/behavior/mouse`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.token}`,\n        },\n        body: JSON.stringify({\n          userId: this.userId,\n          data: dataToSend\n        }),\n      });\n    } catch (error) {\n      console.error('Error sending mouse data:', error);\n    }\n  }\n\n  /**\n   * Stop mouse monitoring\n   */\n  stopMouseMonitoring() {\n    document.removeEventListener('mousemove', this.handleMouseMove);\n    document.removeEventListener('click', this.handleMouseClick);\n    \n    if (this.mouseInterval) {\n      clearInterval(this.mouseInterval);\n      this.mouseInterval = null;\n    }\n    \n    // Flush any remaining data\n    this.flushMouseBuffer();\n    \n    console.log('Mouse monitoring stopped');\n  }\n\n  /**\n   * Start device monitoring\n   * @param {string} userId - User ID\n   * @param {string} token - Authentication token\n   */\n  startDeviceMonitoring(userId, token) {\n    if (this.deviceInterval) return;\n    \n    this.userId = userId;\n    this.token = token;\n    this.monitoringActive = true;\n    \n    // Collect initial device data\n    this.collectDeviceData();\n    \n    // Set up interval to periodically collect and send data\n    this.deviceInterval = setInterval(() => {\n      this.collectDeviceData();\n      this.flushDeviceBuffer();\n    }, 30000); // Every 30 seconds\n    \n    console.log('Device monitoring started');\n  }\n\n  /**\n   * Collect device data\n   */\n  collectDeviceData() {\n    if (!this.monitoringActive) return;\n    \n    const deviceData = {\n      timestamp: Date.now(),\n      userAgent: navigator.userAgent,\n      language: navigator.language,\n      platform: navigator.platform,\n      screenWidth: window.screen.width,\n      screenHeight: window.screen.height,\n      windowWidth: window.innerWidth,\n      windowHeight: window.innerHeight,\n      pixelRatio: window.devicePixelRatio,\n      timeZoneOffset: new Date().getTimezoneOffset(),\n      connection: navigator.connection ? {\n        effectiveType: navigator.connection.effectiveType,\n        downlink: navigator.connection.downlink,\n        rtt: navigator.connection.rtt\n      } : null\n    };\n    \n    this.deviceBuffer.push(deviceData);\n  }\n\n  /**\n   * Send device data to the server\n   */\n  async flushDeviceBuffer() {\n    if (this.deviceBuffer.length === 0) return;\n    \n    const dataToSend = [...this.deviceBuffer];\n    this.deviceBuffer = [];\n    \n    try {\n      await fetch(`${API_BASE_URL}/behavior/device`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.token}`,\n        },\n        body: JSON.stringify({\n          userId: this.userId,\n          data: dataToSend\n        }),\n      });\n    } catch (error) {\n      console.error('Error sending device data:', error);\n    }\n  }\n\n  /**\n   * Stop device monitoring\n   */\n  stopDeviceMonitoring() {\n    if (this.deviceInterval) {\n      clearInterval(this.deviceInterval);\n      this.deviceInterval = null;\n    }\n    \n    // Flush any remaining data\n    this.flushDeviceBuffer();\n    \n    console.log('Device monitoring stopped');\n  }\n\n  /**\n   * Stop all monitoring\n   */\n  stopAllMonitoring() {\n    this.monitoringActive = false;\n    this.stopKeystrokeMonitoring();\n    this.stopMouseMonitoring();\n    this.stopDeviceMonitoring();\n    \n    console.log('All behavioral monitoring stopped');\n  }\n}\n\nexport const behaviorService = new BehaviorService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}