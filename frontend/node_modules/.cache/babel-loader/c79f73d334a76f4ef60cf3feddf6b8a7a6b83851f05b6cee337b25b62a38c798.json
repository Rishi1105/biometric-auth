{"ast":null,"code":"/**\n * Authentication Service\n * Handles user authentication, biometric verification, and token management\n */\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nclass AuthService {\n  /**\n   * Authenticate user with username and password\n   * @param {string} username - User's username\n   * @param {string} password - User's password\n   * @returns {Promise<Object>} - Authentication response with token and userId\n   */\n  async login(username, password) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Authentication failed');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Register a new user\n   * @param {Object} userData - User registration data\n   * @returns {Promise<Object>} - Registration response\n   */\n  async register(userData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Registration failed');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Verify user's biometric data\n   * @param {string} userId - User ID\n   * @param {string} token - Authentication token\n   * @param {string} biometricType - Type of biometric (face, fingerprint, voice)\n   * @param {string} biometricData - Base64 encoded biometric data\n   * @returns {Promise<Object>} - Verification response\n   */\n  async verifyBiometric(userId, token, biometricType, biometricData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/verify-biometric`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          userId,\n          biometricType,\n          biometricData\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Biometric verification failed');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Biometric verification error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Enroll user's biometric data\n   * @param {string} userId - User ID\n   * @param {string} token - Authentication token\n   * @param {string} biometricType - Type of biometric (face, fingerprint, voice)\n   * @param {string} biometricData - Base64 encoded biometric data\n   * @returns {Promise<Object>} - Enrollment response\n   */\n  async enrollBiometric(userId, token, biometricType, biometricData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/enroll-biometric`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          userId,\n          biometricType,\n          biometricData\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Biometric enrollment failed');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Biometric enrollment error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Logout the current user\n   */\n  logout() {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('userId');\n    window.location.href = '/login';\n  }\n\n  /**\n   * Check if user is authenticated\n   * @returns {boolean} - True if user is authenticated\n   */\n  isAuthenticated() {\n    return !!localStorage.getItem('authToken');\n  }\n\n  /**\n   * Get current user's authentication token\n   * @returns {string|null} - Authentication token or null if not authenticated\n   */\n  getToken() {\n    return localStorage.getItem('authToken');\n  }\n\n  /**\n   * Get current user's ID\n   * @returns {string|null} - User ID or null if not authenticated\n   */\n  getUserId() {\n    return localStorage.getItem('userId');\n  }\n}\nexport const authService = new AuthService();","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","AuthService","login","username","password","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","message","error","console","register","userData","verifyBiometric","userId","token","biometricType","biometricData","enrollBiometric","logout","localStorage","removeItem","window","location","href","isAuthenticated","getItem","getToken","getUserId","authService"],"sources":["C:/Users/Rishi/Downloads/biometric-auth/frontend/src/services/authService.js"],"sourcesContent":["/**\n * Authentication Service\n * Handles user authentication, biometric verification, and token management\n */\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nclass AuthService {\n  /**\n   * Authenticate user with username and password\n   * @param {string} username - User's username\n   * @param {string} password - User's password\n   * @returns {Promise<Object>} - Authentication response with token and userId\n   */\n  async login(username, password) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, password }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Authentication failed');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Register a new user\n   * @param {Object} userData - User registration data\n   * @returns {Promise<Object>} - Registration response\n   */\n  async register(userData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(userData),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Registration failed');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Verify user's biometric data\n   * @param {string} userId - User ID\n   * @param {string} token - Authentication token\n   * @param {string} biometricType - Type of biometric (face, fingerprint, voice)\n   * @param {string} biometricData - Base64 encoded biometric data\n   * @returns {Promise<Object>} - Verification response\n   */\n  async verifyBiometric(userId, token, biometricType, biometricData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/verify-biometric`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify({\n          userId,\n          biometricType,\n          biometricData,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Biometric verification failed');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Biometric verification error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Enroll user's biometric data\n   * @param {string} userId - User ID\n   * @param {string} token - Authentication token\n   * @param {string} biometricType - Type of biometric (face, fingerprint, voice)\n   * @param {string} biometricData - Base64 encoded biometric data\n   * @returns {Promise<Object>} - Enrollment response\n   */\n  async enrollBiometric(userId, token, biometricType, biometricData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/enroll-biometric`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify({\n          userId,\n          biometricType,\n          biometricData,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Biometric enrollment failed');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Biometric enrollment error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Logout the current user\n   */\n  logout() {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('userId');\n    window.location.href = '/login';\n  }\n\n  /**\n   * Check if user is authenticated\n   * @returns {boolean} - True if user is authenticated\n   */\n  isAuthenticated() {\n    return !!localStorage.getItem('authToken');\n  }\n\n  /**\n   * Get current user's authentication token\n   * @returns {string|null} - Authentication token or null if not authenticated\n   */\n  getToken() {\n    return localStorage.getItem('authToken');\n  }\n\n  /**\n   * Get current user's ID\n   * @returns {string|null} - User ID or null if not authenticated\n   */\n  getUserId() {\n    return localStorage.getItem('userId');\n  }\n}\n\nexport const authService = new AuthService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}