{"ast":null,"code":"/**\n * Authentication Service\n * Handles user authentication, biometric verification, and token management\n */\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nclass AuthService {\n  /**\n   * Authenticate user with username and password\n   * @param {string} username - User's username\n   * @param {string} password - User's password\n   * @returns {Promise<Object>} - Authentication response with token and userId\n   */\n  async login(username, password) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({\n          message: 'Network error'\n        }));\n        throw new Error(errorData.message || 'Authentication failed');\n      }\n      const data = await response.json();\n\n      // Store token and userId immediately upon successful login\n      if (data.token && data.userId) {\n        localStorage.setItem('authToken', data.token);\n        localStorage.setItem('userId', data.userId);\n      }\n      return data;\n    } catch (error) {\n      console.error('Login error:', error);\n      // Provide more user-friendly error messages\n      if (error.message.includes('fetch')) {\n        throw new Error('Unable to connect to server. Please check your connection.');\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Register a new user\n   * @param {Object} userData - User registration data\n   * @returns {Promise<Object>} - Registration response\n   */\n  async register(userData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Registration failed');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Verify user's biometric data\n   * @param {string} userId - User ID\n   * @param {string} token - Authentication token\n   * @param {string} biometricType - Type of biometric (face, fingerprint, voice)\n   * @param {string} biometricData - Base64 encoded biometric data\n   * @returns {Promise<Object>} - Verification response\n   */\n  async verifyBiometric(userId, token, biometricType, biometricData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/verify-biometric`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          userId,\n          biometricType,\n          biometricData\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Biometric verification failed');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Biometric verification error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Enroll user's biometric data\n   * @param {string} userId - User ID\n   * @param {string} token - Authentication token\n   * @param {string} biometricType - Type of biometric (face, fingerprint, voice)\n   * @param {string} biometricData - Base64 encoded biometric data\n   * @returns {Promise<Object>} - Enrollment response\n   */\n  async enrollBiometric(userId, token, biometricType, biometricData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/enroll-biometric`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          userId,\n          biometricType,\n          biometricData\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Biometric enrollment failed');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Biometric enrollment error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Logout the current user\n   */\n  logout() {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('userId');\n    window.location.href = '/login';\n  }\n\n  /**\n   * Check if user is authenticated\n   * @returns {boolean} - True if user is authenticated\n   */\n  isAuthenticated() {\n    return !!localStorage.getItem('authToken');\n  }\n\n  /**\n   * Get current user's authentication token\n   * @returns {string|null} - Authentication token or null if not authenticated\n   */\n  getToken() {\n    return localStorage.getItem('authToken');\n  }\n\n  /**\n   * Get current user's ID\n   * @returns {string|null} - User ID or null if not authenticated\n   */\n  getUserId() {\n    return localStorage.getItem('userId');\n  }\n}\nexport const authService = new AuthService();","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","AuthService","login","username","password","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","catch","message","Error","data","token","userId","localStorage","setItem","error","console","includes","register","userData","verifyBiometric","biometricType","biometricData","enrollBiometric","logout","removeItem","window","location","href","isAuthenticated","getItem","getToken","getUserId","authService"],"sources":["C:/Users/Rishi/Downloads/biometric-auth/frontend/src/services/authService.js"],"sourcesContent":["/**\n * Authentication Service\n * Handles user authentication, biometric verification, and token management\n */\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nclass AuthService {\n  /**\n   * Authenticate user with username and password\n   * @param {string} username - User's username\n   * @param {string} password - User's password\n   * @returns {Promise<Object>} - Authentication response with token and userId\n   */\n  async login(username, password) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, password }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({ message: 'Network error' }));\n        throw new Error(errorData.message || 'Authentication failed');\n      }\n\n      const data = await response.json();\n      \n      // Store token and userId immediately upon successful login\n      if (data.token && data.userId) {\n        localStorage.setItem('authToken', data.token);\n        localStorage.setItem('userId', data.userId);\n      }\n      \n      return data;\n    } catch (error) {\n      console.error('Login error:', error);\n      // Provide more user-friendly error messages\n      if (error.message.includes('fetch')) {\n        throw new Error('Unable to connect to server. Please check your connection.');\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Register a new user\n   * @param {Object} userData - User registration data\n   * @returns {Promise<Object>} - Registration response\n   */\n  async register(userData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(userData),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Registration failed');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Verify user's biometric data\n   * @param {string} userId - User ID\n   * @param {string} token - Authentication token\n   * @param {string} biometricType - Type of biometric (face, fingerprint, voice)\n   * @param {string} biometricData - Base64 encoded biometric data\n   * @returns {Promise<Object>} - Verification response\n   */\n  async verifyBiometric(userId, token, biometricType, biometricData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/verify-biometric`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify({\n          userId,\n          biometricType,\n          biometricData,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Biometric verification failed');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Biometric verification error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Enroll user's biometric data\n   * @param {string} userId - User ID\n   * @param {string} token - Authentication token\n   * @param {string} biometricType - Type of biometric (face, fingerprint, voice)\n   * @param {string} biometricData - Base64 encoded biometric data\n   * @returns {Promise<Object>} - Enrollment response\n   */\n  async enrollBiometric(userId, token, biometricType, biometricData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/enroll-biometric`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify({\n          userId,\n          biometricType,\n          biometricData,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Biometric enrollment failed');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Biometric enrollment error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Logout the current user\n   */\n  logout() {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('userId');\n    window.location.href = '/login';\n  }\n\n  /**\n   * Check if user is authenticated\n   * @returns {boolean} - True if user is authenticated\n   */\n  isAuthenticated() {\n    return !!localStorage.getItem('authToken');\n  }\n\n  /**\n   * Get current user's authentication token\n   * @returns {string|null} - Authentication token or null if not authenticated\n   */\n  getToken() {\n    return localStorage.getItem('authToken');\n  }\n\n  /**\n   * Get current user's ID\n   * @returns {string|null} - User ID or null if not authenticated\n   */\n  getUserId() {\n    return localStorage.getItem('userId');\n  }\n}\n\nexport const authService = new AuthService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}